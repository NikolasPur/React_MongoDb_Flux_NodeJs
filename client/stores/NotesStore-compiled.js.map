{"version":3,"sources":["NotesStore.js"],"names":[],"mappings":";;;;;;;;sBAA6B,QAAQ;;uCAEX,6BAA6B;;;;qCAC9B,2BAA2B;;;;AAEpD,IAAM,YAAY,GAAG,QAAQ,CAAC;;AAE9B,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,IAAI,aAAa,GAAG,IAAI,CAAC;AACzB,IAAI,UAAU,GAAG,IAAI,CAAC;;AAEtB,SAAS,UAAU,CAAC,IAAI,EAAE;AACtB,WAAO;AACH,UAAE,EAAE,IAAI,CAAC,GAAG;AACZ,aAAK,EAAE,IAAI,CAAC,KAAK;AACjB,YAAI,EAAE,IAAI,CAAC,IAAI;AACf,aAAK,EAAE,IAAI,CAAC,KAAK,IAAI,SAAS;AAC9B,iBAAS,EAAE,IAAI,CAAC,SAAS;KAC5B,CAAC;CACL;;AAED,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,qBAAa,SAAS,EAAE;AACzD,aAAS,EAAA,qBAAG;AACR,eAAO,UAAU,CAAC;KACrB;;AAED,YAAQ,EAAA,oBAAG;AACP,eAAO,MAAM,CAAC;KACjB;;AAED,cAAU,EAAE,sBAAW;AACnB,YAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC3B;;AAED,qBAAiB,EAAE,2BAAS,QAAQ,EAAE;AAClC,YAAI,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KACnC;;AAED,wBAAoB,EAAE,8BAAS,QAAQ,EAAE;AACrC,YAAI,CAAC,cAAc,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC/C;CACJ,CAAC,CAAC;;AAEH,qCAAc,QAAQ,CAAC,UAAS,MAAM,EAAE;AACpC,YAAO,MAAM,CAAC,IAAI;AACd,aAAK,mCAAa,kBAAkB;AAAE;AAClC,0BAAU,GAAG,IAAI,CAAC;;AAElB,0BAAU,CAAC,UAAU,EAAE,CAAC;AACxB,sBAAM;aACT;;AAAA,AAED,aAAK,mCAAa,kBAAkB;AAAE;AAClC,0BAAU,GAAG,KAAK,CAAC;AACnB,sBAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAE,UAAU,CAAE,CAAC;AACxC,6BAAa,GAAG,IAAI,CAAC;;AAErB,0BAAU,CAAC,UAAU,EAAE,CAAC;AACxB,sBAAM;aACT;;AAAA,AAED,aAAK,mCAAa,eAAe;AAAE;AAC/B,6BAAa,GAAG,MAAM,CAAC,KAAK,CAAC;;AAE7B,0BAAU,CAAC,UAAU,EAAE,CAAC;AACxB,sBAAM;aACT;;AAAA,AAED;AAAS;AACL,uBAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;aAClC;AAAA,KACJ;CACJ,CAAC,CAAC;;qBAEY,UAAU","file":"NotesStore-compiled.js","sourcesContent":["import { EventEmitter } from 'events';\n\nimport AppDispatcher from '../dispatcher/AppDispatcher';\nimport AppConstants from '../constants/AppConstants';\n\nconst CHANGE_EVENT = 'change';\n\nlet _notes = [];\nlet _loadingError = null;\nlet _isLoading = true;\n\nfunction formatNote(note) {\n    return {\n        id: note._id,\n        title: note.title,\n        text: note.text,\n        color: note.color || '#ffffff',\n        createdAt: note.createdAt\n    };\n}\n\nconst TasksStore = Object.assign({}, EventEmitter.prototype, {\n    isLoading() {\n        return _isLoading;\n    },\n\n    getNotes() {\n        return _notes;\n    },\n\n    emitChange: function() {\n        this.emit(CHANGE_EVENT);\n    },\n\n    addChangeListener: function(callback) {\n        this.on(CHANGE_EVENT, callback);\n    },\n\n    removeChangeListener: function(callback) {\n        this.removeListener(CHANGE_EVENT, callback);\n    }\n});\n\nAppDispatcher.register(function(action) {\n    switch(action.type) {\n        case AppConstants.LOAD_NOTES_REQUEST: {\n            _isLoading = true;\n\n            TasksStore.emitChange();\n            break;\n        }\n\n        case AppConstants.LOAD_NOTES_SUCCESS: {\n            _isLoading = false;\n            _notes = action.notes.map( formatNote );\n            _loadingError = null;\n\n            TasksStore.emitChange();\n            break;\n        }\n\n        case AppConstants.LOAD_NOTES_FAIL: {\n            _loadingError = action.error;\n\n            TasksStore.emitChange();\n            break;\n        }\n\n        default: {\n            console.log('No such handler');\n        }\n    }\n});\n\nexport default TasksStore;\n"]}